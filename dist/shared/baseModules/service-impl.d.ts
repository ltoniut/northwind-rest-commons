import { Model } from '../../schemas/model';
import { PipeModel } from '../../schemas/pipelines';
import { Val, ValModel } from '../../schemas/validator';
import { BaseDTO } from '../dtos/base-dto';
import { Context } from '../dtos/context';
import { FieldsQuery } from '../dtos/fields-query';
import { FilterQuery } from '../dtos/filter-query';
import { PageQuery } from '../dtos/page-query';
import { GetPaginatedResponseDTO } from '../dtos/get-paginated.response.dto';
import { ResponseDTO } from '../dtos/response.dto';
import { Page } from '../page';
import { BaseRepository } from './repository';
import { BaseService } from './service';
export declare class BaseServiceImpl<TModel, TRepository extends BaseRepository<TModel>> implements BaseService {
    readonly typeName: string;
    readonly repository: TRepository;
    constructor(typeName: string, repository: TRepository);
    readonly model: Model;
    readonly responsePipe: PipeModel;
    readonly createVal: Val;
    readonly createPipe: PipeModel;
    readonly updateVal: Val;
    readonly updatePipe: PipeModel;
    getAll(ctx: Context, filter: PageQuery): Promise<GetPaginatedResponseDTO<BaseDTO>>;
    getById(ctx: Context, id: number, fields: FieldsQuery): Promise<ResponseDTO<BaseDTO>>;
    getSingle(ctx: Context, filter: FilterQuery): Promise<ResponseDTO<BaseDTO>>;
    create(ctx: Context, fields: FieldsQuery, body: BaseDTO): Promise<ResponseDTO<BaseDTO>>;
    update(ctx: Context, id: number, fields: FieldsQuery, body: BaseDTO): Promise<ResponseDTO<BaseDTO>>;
    delete(ctx: Context, id: number): Promise<void>;
    extendResponsePipeline(): PipeModel;
    extendGetAllPostFetch(ctx: Context, page: Page<TModel>): void;
    extendGetAllResponse(ctx: Context, filter: PageQuery, page: Page<TModel>): {
        list: BaseDTO[];
        meta?: Record<string, any>;
    };
    extendGetEntityPostFetch(ctx: Context, entity: TModel): void;
    extendGetSingleResponse(ctx: Context, fields: FieldsQuery, entity: TModel): BaseDTO;
    extendValPipe(val: Val, pipe: PipeModel, body: BaseDTO): void;
    extendCreateValidator(): ValModel;
    extendCreatePipeline(): PipeModel;
    extendCreatePrepare(ctx: Context, body: BaseDTO): Promise<TModel>;
    extendCreatePostSave(ctx: Context, entity: TModel): Promise<void>;
    extendCreateResponse(ctx: Context, fields: FieldsQuery, entity: TModel): BaseDTO;
    extendUpdateValidator(): ValModel;
    extendUpdatePipeline(): PipeModel;
    extendUpdatePrepare(ctx: Context, id: number, body: BaseDTO): Promise<TModel>;
    extendUpdatePostSave(ctx: Context, entity: TModel): Promise<void>;
    extendUpdateResponse(ctx: Context, fields: FieldsQuery, entity: TModel): BaseDTO;
}
